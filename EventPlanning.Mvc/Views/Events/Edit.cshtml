@using EventPlanning.Mvc.Models.Entities
@model Event

@{
    ViewBag.Title = "Редактирование";
}

<h2>Редактирование</h2>


@using (Html.BeginForm("Edit", "Events", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>Мероприятие</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.EventId)

    <div class="form-group">
        @Html.LabelFor(model => model.EventTitle, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.EventTitle, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.EventTitle, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.EventDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.EventDate, new { htmlAttributes = new { @class = "form-control", @id = "dateField" } })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.RepeatEventType, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EnumDropDownListFor(model => model.RepeatEventType, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.RepeatEventType, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.EventDescription, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextAreaFor(model => model.EventDescription, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.EventDescription, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.EventVisible, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.EventVisible, new { htmlAttributes = new { @class = "form-control", id = "dateField" } })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.SplitNumberGroups, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.SplitNumberGroups, new { htmlAttributes = new { @class = "form-control", id = "splitNumberGroup", onchange = "hideAnySplitNumber(splitNumberGroup, splitNumberParticipants)" } })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.SplitNumberParticipants, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.SplitNumberParticipants, new { htmlAttributes = new { @class = "form-control", id = "splitNumberParticipants", onchange = "hideAnySplitNumber(splitNumberParticipants, splitNumberGroup)" } })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.MaximumNumberParticipants, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.MaximumNumberParticipants, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Employees, new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @foreach (var employee in ViewBag.Employees)
            {
                <input type="checkbox" name="selectedEmployees" value="@employee.EmployeeId"
                       @(Model.Employees.Contains(employee) ? "checked=\"checked\"" : "") />
                <p>@employee.FullName.LastName @employee.FullName.FirstName</p>
                <br />
            }
        </div>
    </div>

    <div style="position: relative;">
        <label>Изображение</label>
        <a class='btn' href='javascript:;'>
            Выберите файл...
            <input type="file" name="upimage" size="40"
                   style="position: absolute; z-index: 2; top: 0; left: 0; filter: alpha(opacity=0); opacity: 0; background-color: transparent; color: transparent;"
                   onchange='$("#upload-file-info").html($(this).val());'>
        </a>
        <span class='label label-info' id="upload-file-info"></span>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Сохранить" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Назад к списку", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    @Scripts.Render("~/bundles/jquery")
    @Styles.Render("~/Content/themes/base")
    @Scripts.Render("~/bundles/jqueryui")

    <script type="text/javascript">
        $(document).ready(function() {
            $(function() {
                $("#dateField")
                    .datetimepicker({
                        changeMonth: true,
                        changeYear: true,
                        yearRange: "-0:+5",
                        dateFormat: 'dd-M-yy',
                        controlType: 'select',
                        timeFormat: 'hh:mm TT'
                    })
                    .get(0).setAttribute("type", "text");
            });

            jQuery.validator.methods.date = function(value, element) {
                var isChrome = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
                if (isChrome) {
                    var d = new Date();
                    return this.optional(element) || !/Invalid|NaN/.test(new Date(d.toLocaleDateString(value)));
                } else {
                    return this.optional(element) || !/Invalid|NaN/.test(new Date(value));
                }
            };
        });

        function hideAnySplitNumber(idCurrentElement, idAnyElement) {
            if ($("#idCurrentElement").value = 0) {
                $("#idAnyElement").hide();

            } else {
                $("#idAnyElement").show();

            }
        }
    </script>
}
